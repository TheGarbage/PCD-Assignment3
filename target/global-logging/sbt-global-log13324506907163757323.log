[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\gugli\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\gugli\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.3 (Oracle Corporation Java 20.0.1)
[debug]       Load.loadUnit: plugins took 85.9642ms
[debug]       Load.loadUnit: defsScala took 0.4364ms
[debug] [Loading] Scanning directory C:\Users\gugli\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\gugli\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.3655 ms
[debug]           Load.resolveProject(global-plugins) took 34.1096ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\gugli\.sbt\1.0\plugins, plugins: List(<none>))) took 58.6342ms
[debug] [Loading] Done in C:\Users\gugli\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 86.8632ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1957ms
[debug]     Load.loadUnit(file:/C:/Users/gugli/.sbt/1.0/plugins/, ...) took 183.71ms
[debug]   Load.apply: load took 333.9755ms
[debug]   Load.apply: resolveProjects took 4.1245ms
[debug]   Load.apply: finalTransforms took 39.9545ms
[debug]   Load.apply: config.delegates took 8.7667ms
[debug]   Load.apply: Def.make(settings)... took 289.9738ms
[debug]   Load.apply: structureIndex took 74.4965ms
[debug]   Load.apply: mkStreams took 1.9836ms
[info] loading global plugins from C:\Users\gugli\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1680.0561ms
[debug]           Load.loadUnit: plugins took 12.9605ms
[debug]           Load.loadUnit: defsScala took 0.0046ms
[debug] [Loading] Scanning directory G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3\project
[debug]             Load.loadUnit: mkEval took 4.1894ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2788 ms
[info] loading settings for project pcd-assignment3-build from idea.sbt ...
[debug]               Load.resolveProject(pcd-assignment3-build) took 2.4805ms
[debug]             Load.loadTransitive: finalizeProject(Project(id pcd-assignment3-build, base: G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3\project, plugins: List(<none>))) took 5.3325ms
[debug] [Loading] Done in G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3\project, returning: (pcd-assignment3-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1432.191ms
[debug]           Load.loadUnit: cleanEvalClasses took 35.6385ms
[debug]         Load.loadUnit(file:/G:/Il%20mio%20Drive/Università/Magistrale/Non_Date/Programmazione%20concorrente/PCD-Assignment3/project/, ...) took 1483.878ms
[debug]       Load.apply: load took 1487.0822ms
[debug]       Load.apply: resolveProjects took 0.1218ms
[debug]       Load.apply: finalTransforms took 20.4986ms
[debug]       Load.apply: config.delegates took 0.3217ms
[debug]       Load.apply: Def.make(settings)... took 71.0095ms
[debug]       Load.apply: structureIndex took 22.2669ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2509.1609ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3
[debug]       Load.loadUnit: mkEval took 0.924ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3754 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 14.2189ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3, plugins: List(<none>))) took 17.7438ms
[debug] [Loading] Done in G:\Il mio Drive\Università\Magistrale\Non_Date\Programmazione concorrente\PCD-Assignment3, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 947.1315ms
[debug]     Load.loadUnit: cleanEvalClasses took 158.0238ms
[debug]   Load.loadUnit(file:/G:/Il%20mio%20Drive/Università/Magistrale/Non_Date/Programmazione%20concorrente/PCD-Assignment3/, ...) took 3617.2715ms
[debug] Load.apply: load took 3626.6579ms
[debug] Load.apply: resolveProjects took 0.1035ms
[debug] Load.apply: finalTransforms took 17.1341ms
[debug] Load.apply: config.delegates took 0.2021ms
[debug] Load.apply: Def.make(settings)... took 54.863ms
[debug] Load.apply: structureIndex took 27.7448ms
[debug] Load.apply: mkStreams took 0.0037ms
[info] set current project to PCD-Assignment3 (in build file:/G:/Il%20mio%20Drive/Università/Magistrale/Non_Date/Programmazione%20concorrente/PCD-Assignment3/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65076 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65076, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to PCD-Assignment3 (in build file:/G:/Il%20mio%20Drive/Università/Magistrale/Non_Date/Programmazione%20concorrente/PCD-Assignment3/)
[debug] > Exec(idea-shell, None, None)
